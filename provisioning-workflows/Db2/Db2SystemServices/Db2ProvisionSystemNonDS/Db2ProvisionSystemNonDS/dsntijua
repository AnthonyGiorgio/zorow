//*********************************************************************
//* JOB NAME = DSNTIJUA
//*
//* DESCRIPTIVE NAME = INSTALLATION JOB STREAM
//*
//*    Licensed Materials - Property of IBM
//*    5650-DB2
//*    (C) COPYRIGHT 1982, 2017 IBM Corp.  All Rights Reserved.
//*
//*    STATUS = Version 12
//*
//* FUNCTION = DSNHDECP UPDATES
//*
//* PSEUDOCODE =
//*   DSNTIZP  STEP  ASSEMBLE DSNHDECP DATA-ONLY LOAD MODULE
//*   DSNTIZQ  STEP  LINK EDIT DSNHDECP LOAD MODULE INTO SDSNEXIT
//*   DSNTIMQ  STEP  SMP/E PROCESSING FOR DSNHDECP (OPTIONAL)
//*
//* NOTES = STEP DSNTIMQ MUST BE CUSTOMIZED FOR SMP.  SEE THE NOTES
//*         PRECEDING STEP DSNTIMQ BEFORE RUNNING THIS JOB.
#if(${DSNHDECP} != "DSNHDECP")
//*
//*         STEP DSNTIZQ HAS BEEN CUSTOMIZED TO CREATE A DB2
//*         APPLICATION DEFAULTS MODULE NAMED DSNHDECP WITH AN ALIAS
//*         OF DSNHDECP.  THE ALIAS IS TO ENSURE THAT DSNHDECP CAN BE
//*         LOADED FOR IMPLICIT ATTACH BY THE DB2 CALL ATTACH AND RRS
//*         ATTACH FACILITIES.  IF THE SPECIFIED EXIT LIBRARY
//*         ALREADY CONTAINS A MEMBER OR ALIAS CALLED DSNHDECP, YOU
//*         NEED TO EITHER DELETE THAT MEMBER/ALIAS OR REMOVE THE
//*         ALIAS DIRECTIVE FROM STEP DSNTIZQ.
#end
//*
//* Change activity =
//*   08/07/2017 Split up DSNTIJUZ                     s64075 / PI85767
//*               - DSNTIJUZ: For DSNZPARM
//*               - DSNTIJUA: For DSNHDECP
//*               - DSNTIJUM: For DSNHMCID
//*               - DSNTIJUL: For BSDS / Change log inventory
//*   06/21/2018 Remove references to ADSNLOAD           PI98672/s77957
//*
//*********************************************************************
//*
//*********************************************************************
//* ASSEMBLE AND LINK EDIT DATA-ONLY LOAD MODULE DSNHDECP.
//*********************************************************************
//DSNTIZP EXEC PGM=ASMA90,PARM='OBJECT,NODECK',COND=(4,LT)
#if(${ASMLIB} != "")
//STEPLIB DD DSN=${ASMLIB},DISP=SHR
#end
//SYSLIB   DD  DISP=SHR,
//         DSN=${DSNMACS}
//SYSLIN   DD  DSN=&&LOADSET(DSNHDECA),
//             DISP=(NEW,PASS),
//             #getUnit("${TVOLDEVT}")SPACE=(80,(50,50,2)),
//             DCB=(BLKSIZE=80)
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSUT1   DD  #getUnit("${TVOLDEVT}")SPACE=(800,(50,50),,,ROUND)
//SYSUT2   DD  #getUnit("${TVOLDEVT}")SPACE=(800,(50,50),,,ROUND)
//SYSUT3   DD  #getUnit("${TVOLDEVT}")SPACE=(800,(50,50),,,ROUND)
//SYSIN    DD  *
#formatLine("    DSNHDECM   ASCCSID=${ASCCSID},",
            71,15,false,"X")
#formatLine("               AMCCSID=${AMCCSID},",
            71,15,false,"X")
#formatLine("               AGCCSID=${AGCCSID},",
            71,15,false,"X")
#formatLine("               SCCSID=${SCCSID},",
            71,15,false,"X")
#formatLine("               MCCSID=${MCCSID},",
            71,15,false,"X")
#formatLine("               GCCSID=${GCCSID},",
            71,15,false,"X")
#formatLine("               USCCSID=${USCCSID},",
            71,15,false,"X")
#formatLine("               UMCCSID=${UMCCSID},",
            71,15,false,"X")
#formatLine("               UGCCSID=${UGCCSID},",
            71,15,false,"X")
#formatLine("               ENSCHEME=${ENSCHEME},",
            71,15,false,"X")
#formatLine("               APPENSCH=${APPENSCH},",
            71,15,false,"X")
#formatLine("               DATE=${DEFDATE},",
            71,15,false,"X")
#formatLine("               DATELEN=${DEFDATEL},",
            71,15,false,"X")
#formatLine("               DECARTH=${DECARTH},",
            71,15,false,"X")
#formatLine("               DECIMAL=${DECPOINT},",
            71,15,false,"X")
#formatLine("               DEF_DECFLOAT_ROUND_MODE=${DEFDFPRM},",
            71,15,false,"X")
#formatLine("               DEFLANG=${DEFLANG},",
            71,15,false,"X")
#formatLine("               DELIM=${DEFSTRNG},",
            71,15,false,"X")
#formatLine("               IMPLICIT_TIMEZONE=${IMTZ},",
            71,15,false,"X")
#formatLine("               MIXED=${DEFMIXED},",
            71,15,false,"X")
#formatLine("               PADNTSTR=${PADNTSTR},",
            71,15,false,"X")
#formatLine("               SQLDELI=${DEFSQSTR},",
            71,15,false,"X")
#formatLine("               DSQLDELI=${DECPDSSD},",
            71,15,false,"X")
#formatLine("               SSID=${MVSSNAME},",
            71,15,false,"X")
#formatLine("               STDSQL=${DEFSQLVL},",
            71,15,false,"X")
#formatLine("               TIME=${DEFTIME},",
            71,15,false,"X")
#formatLine("               TIMELEN=${DEFTIMEL},",
            71,15,false,"X")
#formatLine("               DYNRULS=${DYNRULS},",
            71,15,false,"X")
#formatLine("               SQLLEVEL=${SQLL},",
            71,15,false,"X")
#formatLine("               LC_CTYPE=${LCCTYPE}",
            71,15,true,"X")
     END
//*
//*********************************************************************
//* LINK EDIT DSNHDECP AND PUT MODULE IN SDSNEXIT
//*   DSNHDECP IS A DATA-ONLY LOAD MODULE CONTAINING DEFAULT VALUES
//*   AND IS REQUIRED IN SDSNEXIT BY DB2 AND APPLICATION PROGRAMS.
//*********************************************************************
//DSNTIZQ EXEC PGM=IEWL,PARM='LIST,XREF,LET,RENT',
//             COND=(4,LT)
//DSNLOAD  DD  DISP=SHR,
//         DSN=${DSNEXIT}
//         DD  DISP=SHR,
//         DSN=${DSNLOAD}
//SYSPUNCH DD  DSN=&&LOADSET(DSNHDECA),DISP=(OLD,DELETE)
//SYSLMOD  DD  DISP=SHR,
//         DSN=${DSNEXIT}
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSUT1   DD  #getUnit("${TVOLDEVT}")SPACE=(1024,(50,50))
//SYSLIN   DD  *
   INCLUDE SYSPUNCH(DSNHDECA)
   ORDER   DSNAA
   INCLUDE DSNLOAD(DSNAA)
   INCLUDE DSNLOAD(DSNARIB)
   ENTRY   DSNHDECP
   MODE    AMODE(24),RMODE(24)
#if(${DSNHDECP} != "DSNHDECP")
   ALIAS   DSNHDECP
#end
   NAME    ${DSNHDECP}(R)
//*
//*********************************************************************
//* OPTIONAL DO SMP/E PROCESSING TO TRACK DSNHDECP CHANGES.
//*
//*  This job step defines SMP/E JCLIN processing for DB2.  Advanced
//*  SMP/E skills are recommended.  Before enabling this job step,
//*  be aware that:
//*   * Any changes you make to this job may affect current or future
//*     SMP/E processing for DB2.
//*   * Any changes made to the low level qualifier of any data sets
//*     used here may result in new DDDEFs being required.
//*   * You may need to define a DDDEF for the system MACLIB in the
//*     target zone of the CSI used for DB2, and add it to the
//*     DDDEF(SYSLIB) concatenation.
//*
//*  Contact the IBM Support Center for further information.
//*
//* NOTE: THIS STEP MUST BE CUSTOMIZED AS FOLLOWS FOR SMP:
//* 1. UNCOMMENT THE STEP
//* 2. LOCATE AND CHANGE THE FOLLOWING STRINGS TO THE VALUES YOU
//*    SPECIFIED FOR THEM IN JOB DSNTIJAE:
//*    A.'?SMPPRE?' TO THE PREFIX OF YOUR SMP LIBRARY NAME.
//*    B.'?SMPMLQ?' TO THE MIDDLE LEVEL QUALIFIER OF YOUR SMP CSI
//* 3. UPDATE SYSOUT CLASSES AS DESIRED (DEFAULT IS '*')
//*********************************************************************
//*  //DSNTIMQ EXEC PGM=GIMSMP,PARM='CSI=?SMPPRE?.?SMPMLQ?.CSI',
//*  //             REGION=4096K,COND=(2,LT)
//*  //SYSPRINT DD  SYSOUT=*
//*  //SYSUDUMP DD  SYSOUT=*
//*  //SMPCNTL DD *
//*      SET BDY(DSNTARG).
//*      JCLIN.
//*  //SMPJCLIN DD DISP=SHR,
//*  //      DSN=IVTC10.ZCAUTOSA.SDSNSAMP(DSNTIJUA)
//*
## Macro to pad a string with spaces to the right.
## $str is the string to be padded.
## $len is the length to which the string will be padded.
#macro(pbr $var $len)
#set ($plen = $len - $var.length())
#set ($b = "                                        ")
#set ($b = "$b                                      ")
#if ($plen > 0)$var$b.substring(0,$plen)#else$var#end
#end
## Macro to get the UNIT parameter of a DD statement.
## $device is the device type.
#macro(getUnit $devtype)
#if($devtype != "")UNIT=${devtype},#else#end
#end
## Macro to get the SYSLIN member used in assemblingDSNZPARM.
## $dsnzparm is the name of the subsystem parametermodule.
#macro(getLmm $dsnzparm)
#set ($len = $dsnzparm.length() - 1)
DSNTILM$dsnzparm.substring($len)#end
## Macro to get the port number.
## $port is the input port number in String.
#macro(getPort $port)
#set ($zero=0)
#if($port != "")${port}#else${zero}#end
#end
## Macro to wrap trace with parentheses if needed.
## $trace indicates whether the input to trace classes isa list.
#macro(getTrace $trace)
#if ($trace == "YES" || $trace == "NO" || $trace == "*")
$trace#else($trace)#end
#end
## Macro to format a line and ensure continuation char atcolumn 72.
## $line is the statement to be formatted.
## $len is the maximum length of a line.
## $indent is the length of the indentation.
## $isLastLine indicates if the statement is the last oneof a group of
## parameters. The last one does not need thecontinuation character.
## $suffix is the continuation character.
#macro(formatLine $line $len $indent $isLastLine $suffix)
#if($line.length() <= $len)
#if($isLastLine)
$line.format("%-${len}s", $line)
#else
$line.format("%-${len}s", $line)$!{suffix}
#end
#else
#makeIndent("$line", $len, $indent, $isLastLine,"$!{suffix}")
#end
#end
## Macro to handle indentation if JCL statement does notfit in 71 chars
## $line is the statement to be formatted
## $len is the maximum length of a line.
## $indent is the length of the indentation.
## $isLastLine indicates if the statement is the last oneof a group of
## parameters. The last one does not need thecontinuation character.
## $suffix is the continuation character.
#macro(makeIndent $line $len $indent $isLastLine $suffix)
$line.substring(0, ${len})$suffix
#set ($left = $line.substring(${len}))
#set ($size = $indent + $left.length())
#set ($left = $left.format("%${size}s", $left))
#if($left.length() <= $len)
#if($isLastLine)
$line.format("%-${len}s", $left)
#else
$line.format("%-${len}s", $left)$suffix
#end
#else
#makeIndent("$left", $len, $indent, $isLastLine,"$suffix")
#end
#end
## Macro to append suffix for data sets
## $suffix is the data set suffix
## return the suffix with the right period
#macro (libs $suffix)
#if ($suffix !=  "")
.$suffix#else#end#end
